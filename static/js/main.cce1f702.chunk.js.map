{"version":3,"sources":["helpers/index.js","components/index.js","components sync /[^/]+/index/.js$","components/Widget/index.js","helpers sync /[^/]+/index/.js$","helpers/CallGetChannelSettings/index.js","context/index.js","helpers/CallValidateApiKey/index.js","components/themes/default.js","components/App.js","serviceWorker.js","index.js"],"names":["req","require","keys","forEach","key","componentName","replace","module","exports","default","map","webpackContext","id","webpackContextResolve","__webpack_require__","o","e","Error","code","Object","resolve","Widget","props","Settings","useContext","SettingsContext","useState","activities","styled","div","accentColor","Wrapper","useEffect","console","log","children","item","objectID","href","url","title","a","axios","method","process","REACT_APP_API","headers","Accept","data","ApiKey","catch","error","result","CallGetChannelSettings","React","createContext","SettingsContextProvider","Provider","Consumer","CallValidateApiKey","theme","primary","secondary","danger","alert","success","white","grayscale","pre","quote","maxWidth","GlobalStyle","createGlobalStyle","whiteColor","App","config","apiKeyIsValid","settings","Fragment","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cce1f702.chunk.js","sourcesContent":["const req = require.context('.', true, /\\.\\/[^/]+\\/index\\.js$/);\r\n\r\nreq.keys().forEach(key => {\r\n\tconst componentName = key.replace(/^.+\\/([^/]+)\\/index\\.js/, '$1');\r\n\tmodule.exports[componentName] = req(key).default;\r\n});\r\n","const req = require.context('.', true, /\\.\\/[^/]+\\/index\\.js$/);\r\n\r\nreq.keys().forEach(key => {\r\n\tconst componentName = key.replace(/^.+\\/([^/]+)\\/index\\.js/, '$1');\r\n\tmodule.exports[componentName] = req(key).default;\r\n});\r\n","var map = {\n\t\"./Widget/index.js\": 37\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 36;","import React, { useState, useEffect, useContext } from 'react';\r\nimport styled from 'styled-components';\r\nimport SettingsContext from '../../context';\r\n\r\nimport { CallValidateApiKey } from '../../helpers';\r\n\r\nconst Widget = props => {\r\n\tconst Settings = useContext(SettingsContext);\r\n\r\n\tconst [activities, setActivity] = useState([]);\r\n\r\n\tconst Widget = styled.div`\r\n\t\tbackground: ${Settings.accentColor};\r\n\t\tcolor: #fff;\r\n\t\tborder: 0;\r\n\t\tpadding: 7px 10px;\r\n\t`;\r\n\r\n\tconst Wrapper = styled.div`\r\n\t\tmax-width: 800px;\r\n\t\tmargin: auto;\r\n\t`;\r\n\r\n\tuseEffect(() => {\r\n\t\t//nextActivitity();\r\n\t\tconsole.log('hook...');\r\n\t});\r\n\r\n\tconst nextActivitity = _ => {\r\n\t\tconst nextActivity = activities.length === 0 ? 'init' : 'next';\r\n\t\tconsole.log(nextActivity);\r\n\t\tsetActivity(['1']);\r\n\t};\r\n\r\n\t//nextActivitity();\r\n\treturn (\r\n\t\t<Widget>\r\n\t\t\t<Wrapper>\r\n\t\t\t\t<header>Header</header>\r\n\t\t\t\t{props.children}\r\n\t\t\t\t{activities.map(item => (\r\n\t\t\t\t\t<li key={item.objectID}>\r\n\t\t\t\t\t\t<a href={item.url}>{item.title}</a>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t))}\r\n\t\t\t</Wrapper>\r\n\t\t</Widget>\r\n\t);\r\n};\r\n\r\nconst initActivity = () => {};\r\n\r\nexport default Widget;\r\n","var map = {\n\t\"./CallGetChannelSettings/index.js\": 39,\n\t\"./CallValidateApiKey/index.js\": 56\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 38;","import axios from 'axios';\r\n\r\nasync function CallGetChannelSettings(Settings) {\r\n\tconst result = await axios({\r\n\t\tmethod: 'POST',\r\n\t\turl: process.env.REACT_APP_API + '/GetChannelSettings',\r\n\t\theaders: {\r\n\t\t\tAccept: '*/*',\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t},\r\n\t\tdata: {\r\n\t\t\tApiKey: Settings.ApiKey\r\n\t\t}\r\n\t}).catch(error => {\r\n\t\tconsole.log(error);\r\n\t\treturn false;\r\n\t});\r\n\r\n\treturn result.data || false;\r\n\t//setData(result.data);\r\n}\r\n\r\nexport default CallGetChannelSettings;\r\n","//https://www.taniarascia.com/using-context-api-in-react/\r\nimport React from 'react';\r\n\r\nconst SettingsContext = React.createContext({});\r\n\r\nexport const SettingsContextProvider = SettingsContext.Provider;\r\nexport const SettingsContextConsumer = SettingsContext.Consumer;\r\nexport default SettingsContext;\r\n","import axios from 'axios';\r\n\r\nasync function CallValidateApiKey(Settings) {\r\n\tconst result = await axios({\r\n\t\tmethod: 'POST',\r\n\t\turl: process.env.REACT_APP_API + '/ValidateApiKey',\r\n\t\theaders: {\r\n\t\t\tAccept: '*/*',\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t},\r\n\t\tdata: {\r\n\t\t\tApiKey: Settings.ApiKey\r\n\t\t}\r\n\t}).catch(error => {\r\n\t\tconsole.log(error);\r\n\t\treturn false;\r\n\t});\r\n\r\n\treturn result.data || false;\r\n\t//setData(result.data);\r\n}\r\n\r\nexport default CallValidateApiKey;\r\n","// https://github.com/diegohaz/arc/wiki/Styling\r\n\r\nconst theme = {}\r\n\r\ntheme.palette = {\r\n  primary: ['#1976d2', '#2196f3', '#71bcf7', '#c2e2fb'],\r\n  secondary: ['#c2185b', '#e91e63', '#f06292', '#f8bbd0'],\r\n  danger: ['#d32f2f', '#f44336', '#f8877f', '#ffcdd2'],\r\n  alert: ['#ffa000', '#ffc107', '#ffd761', '#ffecb3'],\r\n  success: ['#388e3c', '#4caf50', '#7cc47f', '#c8e6c9'],\r\n  white: ['#fff', '#fff', '#eee'],\r\n  grayscale: [\r\n    '#212121',\r\n    '#414141',\r\n    '#616161',\r\n    '#9e9e9e',\r\n    '#bdbdbd',\r\n    '#e0e0e0',\r\n    '#eeeeee',\r\n    '#ffffff',\r\n  ],\r\n}\r\n\r\n\r\ntheme.fonts = {\r\n  primary: 'Helvetica Neue, Helvetica, Roboto, sans-serif',\r\n  pre: 'Consolas, Liberation Mono, Menlo, Courier, monospace',\r\n  quote: 'Georgia, serif',\r\n}\r\n\r\ntheme.sizes = {\r\n  maxWidth: '1100px',\r\n}\r\n\r\nexport default theme","import React, { useState, useEffect } from 'react';\nimport { createGlobalStyle, ThemeProvider } from 'styled-components';\nimport { SettingsContextProvider } from '../context';\nimport { Widget } from './';\n\nimport theme from './themes/default';\nimport { CallValidateApiKey, CallGetChannelSettings } from '../helpers';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    //color: ${props => (props.whiteColor ? 'white' : 'black')};\n  }\n`;\n\nconst App = ({ config }) => {\n\t//const Settings = useContext(SettingsContext);\n\tconst [settings, setSettings] = useState({\n\t\t...config,\n\t\tapiKeyIsValid: null\n\t});\n\n\t//const [settings, setSettings] = useState(null);\n\n\tuseEffect(() => {\n\t\tconst fetchConfig = async () => {\n\t\t\t//const keyValidation = await CallValidateApiKey(config);\n\t\t\t//const channelSettings = await CallGetChannelSettings(config);\n\t\t\t// const allConfigSettings = {\n\t\t\t// \t...config,\n\t\t\t// //\t...keyValidation,\n\t\t\t// \t...channelSettings,\n\t\t\t// \taccentColor: channelSettings.clientColor || config.accent_color // reconcile two different settings into new one\n\t\t\t// };\n\t\t\t// await setSettings(allConfigSettings);\n\t\t};\n\t\t//fetchConfig();\n\t});\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<SettingsContextProvider value={settings}>\n\t\t\t\t<ThemeProvider theme={theme}>\n\t\t\t\t\t<GlobalStyle />\n\n\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t{settings.apiKeyIsValid === null && <div>Loading...</div>}\n\t\t\t\t\t\t{settings.apiKeyIsValid === true && <Widget>He hallo</Widget>}\n\t\t\t\t\t\t{settings.apiKeyIsValid === false && <div>Invalid</div>}\n\t\t\t\t\t</React.Fragment>\n\t\t\t\t</ThemeProvider>\n\t\t\t</SettingsContextProvider>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}